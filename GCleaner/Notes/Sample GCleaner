Sample GCleaner

Packed: 0918a0e9939f235924a5fb65284c97efff83f871bc1851c7e61b1b9800512885

Unpacked:931309bc4cca2b42beae4a162c200bf76dc5a3dba9980f93d7959dc1001b9c


Stack Strings

Most of the stack strings are fetched from a single initial function.
Hex values are pushed into memory locations.
Two functions are called which cancel each other out.
They simply +5 and xor by 0x13 and the other does the inverse.
In the end, the hex values are the characters that will be concatanated to form a string.
Let's call them:
mw_xor_b
mw_xor_string

mw_xor_b is called on each single hex byte,and saved to sequential memory block.
mw_xor_string is finally called on the pointer to the start of the memory block.

The two functions help build out a pattern which looks something like this:

mw_xor_b(location)
mw_xor_b(location+1)
mw_xor_b(location+2)
mw_xor_string(&location)

Using the BinaryNinha API, the script will go through all the basic blocks of the .text section, identify all the single hex bytes that are before any call to mw_minus5xor.
This is because we know once mw_minus5xor is called the string is complete in memory.

This gives us all the strings and the relevant locations in the code.
From here things are as simple as just reading through the code.


C2 comms:

There is one specific function which deals with interaction with the C2 server.
The funciton is called 4 times.
Each time, before the call some memory allocations take place for the parameters that need to be sent to the C2.

The first time the malware proceeds to reach out to C2 (185.172.128.90) with URI:
/cpa/ping.php?substr=%s&s=ab&sub=%s 

The second time it reaches to the C2 (185.172.128.65) with URI:
ping.php?substr=%s 

And also sending out the following information:
"SOFTWARE\BroomCleaner Installed 1"

The third time it calls the C2 (185.172.128.65) for a binary:
syncUpd.exe

Last time it calls for the C2 (185.172.128.144) for another binary:
BroomSetup.exe



File execution:

The files will be executed with ShellExecuteEx after some initial setups of structures necessary to sue the API call.



